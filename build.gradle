plugins {
    id "java-library"
    id "io.qameta.allure" version "2.9.6"
}

repositories {
    mavenCentral()
}

def junitVersion = "5.8.2",
    selenideVersion = '6.4.0',
    allureVersion = "2.17.3",
    slf4jVersion = "1.7.36",
    ownerVersion = "1.0.12",
    assertjVersion = "3.22.0",
    appiumVersion = "8.0.0",
    restAssuredVersion = "5.0.1",
    commonsIoVersion = "2.11.0"

dependencies {
    testImplementation(
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.aeonbits.owner:owner:$ownerVersion",
            "org.assertj:assertj-core:$assertjVersion",
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.appium:java-client:$appiumVersion",
            "commons-io:commons-io:$commonsIoVersion"

    )
    testRuntimeOnly(
            "org.junit.jupiter:junit-jupiter-engine:$junitVersion",
            "org.slf4j:slf4j-simple:$slf4jVersion")
}

allure {
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
    report {
        version.set(allureVersion)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }
}

task web(type: Test) {
    useJUnitPlatform{
        includeTags "web"
    }
}

task mobile(type: Test) {
    useJUnitPlatform{
        includeTags "mobile"
    }
}